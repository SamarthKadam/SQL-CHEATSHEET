What is SQL?
SQL stands for Structured Query Language
SQL lets you access and manipulate databases
SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987


What Can SQL do?
SQL can execute queries against a database
SQL can retrieve data from a database
SQL can insert records in a database
SQL can update records in a database
SQL can delete records from a database
SQL can create new databases
SQL can create new tables in a database
SQL can create stored procedures in a database
SQL can create views in a database
SQL can set permissions on tables, procedures, and views

Using SQL in Your Web Site
To build a web site that shows data from a database, you will need:

An RDBMS database program (i.e. MS Access, SQL Server, MySQL)
To use a server-side scripting language, like PHP or ASP
To use SQL to get the data you want
To use HTML / CSS to style the page

Basic Query looks like this:
SELECT * FROM EMPLOYEE WHERE ID=2 ORDER BY first_name

SELECT:
SELECT * FROM customers                                             ///Selects every column from the customers table
SELECT first_name,last_name,points*10 as increPoints from customers ///Selects only specified column and values can be modified and also named something different using AS
SELECT DISTINCT state from customers                                ///Does not allow duplicates of mentioned field that is state

WHERE:
We can have many operaters that can be used beside where.Some of them are
>
<
>=
<=
!= or <>
SELECT * from customers where birth_date>'1987-01-01'

AND,OR,NOT
SELECT * from customers where state='VA' or points>=2000

IN 
SELECT * from customers where state='VA' or state='CO'
instead of going with above statements in makes it easy.We can say like it is for the OR elimination
SELECT * from customers where state IN ('VA','CO')

BETWEEN
SELECT * from customers where points>=1000 AND points<=2000
instead of going with above statements between makes it easy.We can say like it is for the AND elimination
SELECT * from customers where points BETWEEN 1000 AND 2000

LIKE
It is used for matching string like ends with, starts with, contains like statements some of the examples are
SELECT * from customers where first_name like'%y'                    ///Get all customers where last_name end with y
SELECT * from customers where first_name like'y%'                    //Get all customers where last_name start with y
SELECT * FROM customers where first_name like '%y%'                  //Get  all the customers where last_name contains y in the middle

Or we can also have statements like
SELECT * FROM customers where first_name like '_____y'                ///Get all the attr where first_name contains 6 letters where ending letter is y


REGEXP
We can use regexp as these are powerful when we are working with strings

SELECT * from customers where last_name regexp '^B'             ///Get all the customers whose lastname starts with b
SELECT * from customers where last_name regexp 'y$'             ///Get all the customers whose lastname ends with y
SELECT * from customers where last_name regexp 'oa|se'          ///Get all the customers which contain consectives oa or se
SELECT * from customers where last_name regexp '^bo|ay$'        ///Get all the customers which stars with bo or ends with ay
SELECT * from customers where last_name regexp '[oa]g'          //Get all the customers where last_name has O or A preceding g
SELECT * from customers where last_name regexp '[a-h]g          //Get all the customers where last_name has A-H preceding g


IS NULL
SELECT * from customers where phone is null                    //Get all customers where phone is null
SELECT * from customers where phone is not null                //Get all customers where phone is not null

ORDER BY
SELECT * from customers order by first_name desc              //Select all the customers firstname by descending order default it is ascending order
SELECT * from customers order by first_name,last_name         //Select all the customers firstname by asceding order, if first_name is same then go through last_name asceding order
 
LIMIT
limit the data like
SELECT * FROM customers limit 3                               //We would only get 3 data
SELECT * FROM customers limit 6,3                             //Here we would skip 6 documents and get next 3 docs


INNER JOIN OR JOIN
It is used for joining two or more tables for example Consider the query
SELECT P.product_id,P.name,OA.quantity,OA.unit_price FROM order_items OA join products P where OA.product_id=P.product_id
Above query joins the order_items table and products table

SELF JOIN
It is used to join same tables that is to refer the same table
SELECT E.first_name,M.first_name FROM  employees E join employees M where E.reports_to=M.employee_id
Above query is used to get all the managers

JOIN more then one table:
instead of where use on in this case like example
select P.payment_id,C.name,PM.name from payments P join clients C on P.client_id=C.client_id join payment_methods PM on P.payment_method=PM.payment_method_id

*In some of the tables we have two composition of 2 id's for recognition of the one of the tupple . This is called composite keys
select * from order_item_notes OIN join order_items OI on OIN.order_id=OI.order_id AND OIN.product_id=OIN.product_id;

IMPLICIT JOIN
Where you don't need to join. for exampel query can be like
SELECT * FROM cutomers,orders where customers.order_id=order.order_id;


OUTER JOIN (LEFT JOIN OR RIGHT JOIN)
It is about getting all the data from it doesn't matter wheather there is match or not but we need the data.
Syntax is like this:
select P.product_id,P.name,OI.quantity from products P left join order_items OI on P.product_id=OI.product_id;



OUTER JOIN using MULTIPLE TIMES
select O.order_date,O.order_id,C.first_name,S.name,OS.name from customers C join orders O on C.customer_id=O.customer_id left join shippers S on S.shipper_id=O.shipper_id join order_statuses OS on OS.order_status_id=O.status; 
(*understand one crux)

*SELF OUTER JOIN
select E.first_name, M.first_name from employees E left join employees M on E.reports_to=M.employee_id;

USING
If you are comparing two id when joining instead of writing the condition like on P.customer_id=Q.customer_id we can write USING(customer_id)
select P.date,C.name, P.amount,PM.name from clients C join payments P using (client_id) join payment_methods PM on PM.payment_method_id=P.payment_method;


NATURAL JOIN
The database decides on what basis or on what colums basis should it be joined 
select o.order_id,c.first_name from orders o natural join customers c;

CROSS JOIN
It is used to join every item to other item like 0(n2)

UNION
It is used to join two queries like it can be used between two select statements. No of colums in both should be same or else it would throw error.